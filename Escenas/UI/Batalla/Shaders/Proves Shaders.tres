[gd_resource type="VisualShader" load_steps=5 format=3 uid="uid://u6x1v7lnb3d4"]

[sub_resource type="VisualShaderNodeIf" id="VisualShaderNodeIf_mtgc0"]
output_port_for_preview = 0

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_rihwa"]
input_name = "point_coord"

[sub_resource type="VisualShaderNodeIf" id="VisualShaderNodeIf_cpfxd"]
default_input_values = [0, 0.5, 1, 0.0, 2, 1e-05, 3, Vector3(0, 0, 0), 4, Vector3(0, 0, 0), 5, Vector3(0, 0, 0)]

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_p4irf"]
constant = 1.0

[resource]
code = "shader_type canvas_item;
render_mode blend_mix;




void fragment() {
	vec3 n_out2p0;
// If:2
	float n_in2p0 = 0.00000;
	float n_in2p1 = 0.00000;
	float n_in2p2 = 0.00001;
	vec3 n_in2p3 = vec3(0.00000, 0.00000, 0.00000);
	vec3 n_in2p4 = vec3(0.00000, 0.00000, 0.00000);
	vec3 n_in2p5 = vec3(0.00000, 0.00000, 0.00000);
	if(abs(n_in2p0 - n_in2p1) < n_in2p2)
	{
		n_out2p0 = n_in2p3;
	}
	else if(n_in2p0 < n_in2p1)
	{
		n_out2p0 = n_in2p5;
	}
	else
	{
		n_out2p0 = n_in2p4;
	}


// Output:0
	COLOR.rgb = n_out2p0;


}
"
mode = 1
flags/light_only = false
nodes/vertex/2/node = SubResource("VisualShaderNodeIf_cpfxd")
nodes/vertex/2/position = Vector2(160, 180)
nodes/vertex/3/node = SubResource("VisualShaderNodeFloatConstant_p4irf")
nodes/vertex/3/position = Vector2(-160, 220)
nodes/vertex/connections = PackedInt32Array(3, 0, 2, 0)
nodes/fragment/0/position = Vector2(360, 100)
nodes/fragment/2/node = SubResource("VisualShaderNodeIf_mtgc0")
nodes/fragment/2/position = Vector2(80, 80)
nodes/fragment/3/node = SubResource("VisualShaderNodeInput_rihwa")
nodes/fragment/3/position = Vector2(-220, 60)
nodes/fragment/connections = PackedInt32Array(2, 0, 0, 0)
